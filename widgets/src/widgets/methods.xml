<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Method Browser" description="" author="Alexander Tobias Neumann" author_email="neumann@dbis.rwth-aachen.de" width="435" height="500">

    <Require feature="opensocial-0.8" ></Require>
    <Require feature="openapp" ></Require>
    <Require feature="dynamic-height"></Require>
    
    <OAuth>
      <Service name="openapp"
               xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/"
               openapp:service="http://purl.org/role/terms/spaceService"
               openapp:permitReadAppend="http://purl.org/role/terms/data">
        <Request method="" url=""></Request>
        <Authorization url=""></Authorization>
        <Access method="" url=""></Access>
      </Service>
    </OAuth>
    
  </ModulePrefs>
  <Content type="xml">
    <![CDATA[
             <head>
             <meta charset="utf-8">
             <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
             <title>Method Browser</title>

<script src="http://127.0.0.1:8081/methodselector/src/js/loginscript.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/js/conf.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/js/util.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/js/lib/openapp.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/js/lib/iwc.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/js/lib/syncmeta-plugin.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/js/lib/las2peerWidgetLibrary.js"></script>
<script src="http://127.0.0.1:8081/methodselector/src/elements/webcomponentsjs/webcomponents-lite.js"></script>
<script type="text/javascript"  src="http://127.0.0.1:8081/methodselector/src/js/loginscript.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/yjs/y.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/y-array/y-array.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/y-map/y-map.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/y-text/y-text.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/y-memory/y-memory.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/y-websockets-client/y-websockets-client.js"></script>
<script type="text/javascript" src="http://127.0.0.1:8081/methodselector/src/js/lib/vendor/webcomponentsjs/webcomponents-lite.js"></script>
<script>
              var x;
              Y({
                db: {
                  name: 'memory' // use memory database adapter.
                  // name: 'indexeddb' // use indexeddb database adapter instead for offline apps
                },
                connector: {
                  //name: 'webrtc', // use webrtc connector
                  name: 'websockets-client',
                  // name: 'xmpp'
                  room: 'SBFModeling', // clients connecting to the same room share data
                  url: 'http://127.0.0.1:1234'
                },
                sourceDir: '/node_modules', // location of the y-* modules (browser only)
                share: {
                  users: 'Map',
                  join: 'Map',
                  canvas: 'Map',
                  nodes: 'Map',
                  edges: 'Map',
                  userList: 'Map',
                  select: 'Map',
                  views: 'Map',
                  data: 'Map',
                  activity:'Map',
                  globalId: 'Array',
                  text:"Text"
                }
              }).then(function (y) {
                x = y;
                ySyncMetaInstance = y;
                iwcClient = new Las2peerWidgetLibrary(conf.external.LAS,
                                                iwcCallback,
                                                "ATTRIBUTE");

                // Yjs
                y.share.data.observe(methodUpdated);

                window.y = y;
                ySyncMetaInstance = y;
                console.info('Object Viewer: Yjs successfully initialized');
                syncmeta.init(y);
                util.subscribeY(syncmeta, methodChanged);
                //y.share.data.observe(storyUpdated);
                y.share.canvas.observe(function (event) {
                  console.log(event);
                });
              })

              var iwcCallback = function (intent) {
                console.log("VIEWER RECEIVED", intent);
                switch (intent.action) {
                case conf.intents.syncmeta:
                  var payload = intent.extras.payload.data;
                  if (payload.type == conf.operations.entitySelect) {
                    var id = JSON.parse(payload.data).selectedEntityId;
                    if(isMethod(id)){
                      selectMethod(getObjectAttributes(id));
                    };
                  }
                  break;
                }
              };

              var methodUpdated = function (events) {
                console.log("Updated:");
                //console.log(events);
              };
              var methodChanged = function (events) {
                console.log("Changed:");
                //console.log(events);
              };

              function isMethod(id){
                let nodes = x.share.data.get("model").nodes;
                if(nodes[id] !== 'undefined'){
                  if(nodes[id].type=="Bot Action" || nodes[id].type=="User Action"){
                    return true;
                  }
                }
                return false;
              }

              function getObjectAttributes(id){
                let nodes = x.share.data.get("model").nodes;

                if(nodes[id] !== 'undefined'){
                  return nodes[id].attributes;
                }
              }

              function selectMethod(attr){
                $("#m")[0].selectMethod(attr);
              }
             </script>
             
             <link rel="import" href="http://localhost:8081/methodselector/src/elements/method-selector-element.html">
             </head>
             <body style="background-color:rgb(250, 250, 250);">
             
             <method-selector-element id="m" onclick="this.setUrl(x.share.data.get('model'));"></method-selector-element>
             <textarea style="display:none"></textarea>
             </body>

    ]]>
  </Content>
</Module>
