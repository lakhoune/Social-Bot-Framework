<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Train Browser" description="" author="Alexander Tobias Neumann" author_email="neumann@dbis.rwth-aachen.de" width="480" height="410">

    <Require feature="opensocial-0.8" ></Require>
    <Require feature="openapp" ></Require>
    <Require feature="dynamic-height"></Require>
    
    <OAuth>
      <Service name="openapp"
               xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/"
               openapp:service="http://purl.org/role/terms/spaceService"
               openapp:permitReadAppend="http://purl.org/role/terms/data">
        <Request method="" url=""></Request>
        <Authorization url=""></Authorization>
        <Access method="" url=""></Access>
      </Service>
    </OAuth>
    
  </ModulePrefs>
  <Content type="xml">
    <![CDATA[
             <head>
             <meta charset="utf-8">
             <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
             <title>Train Browser</title>

<script type="text/javascript" src="http://localhost:7888/methodselector/src/js/loginscript.js"></script>
<script type="text/javascript" src="http://localhost:7888/methodselector/src/js/conf.js"></script>
<script type="text/javascript" src="http://localhost:7888/methodselector/src/js/util.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/openapp.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/iwc.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/syncmeta-plugin.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/las2peerWidgetLibrary.js"></script>
<script type="text/javascript" src="http://localhost:7888/methodselector/src/js/lib/vendor/webcomponentsjs/webcomponents-lite.js"></script>
<script type="text/javascript" src="http://localhost:7888/methodselector/src/js/loginscript.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/vendor/yjs/y.js"></script>
<script type="text/javascript"  src="http://127.0.0.1:7888/methodselector/src/js/lib/vendor/y-array/y-array.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/vendor/y-map/y-map.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/vendor/y-text/y-text.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/vendor/y-memory/y-memory.js"></script>
<script type="text/javascript" src="http://127.0.0.1:7888/methodselector/src/js/lib/vendor/y-websockets-client/y-websockets-client.js"></script>
<script type="text/javascript" src="http://localhost:7888/methodselector/src/js/lib/vendor/webcomponentsjs/webcomponents-lite.js"></script>
<custom-style>
<style>
  #buttons{
    margin-left: 25px;
  }
  paper-button{
        width:130px;
        font-weight: bold;
      }
      paper-button.green {
        background-color: #388e3c;
        color: white;
      }

      paper-button.red {
        background-color: #d32f2f;
        color: white;
      }

      paper-button.blue {
        background-color: #1976d2;
        color: white;
      } 
  </style>
</custom-style>
<script>
              var x;
              var iwcClient;
              Y({
                db: {
                  name: 'memory' // use memory database adapter.
                  // name: 'indexeddb' // use indexeddb database adapter instead for offline apps
                },
                connector: {
                  //name: 'webrtc', // use webrtc connector
                  name: 'websockets-client',
                  // name: 'xmpp'
                  room: 'testspace', // clients connecting to the same room share data
                  url: 'http://127.0.0.1:1234'
                },
                sourceDir: '/node_modules', // location of the y-* modules (browser only)
                share: {
                  users: 'Map',
                  join: 'Map',
                  canvas: 'Map',
                  nodes: 'Map',
                  edges: 'Map',
                  userList: 'Map',
                  select: 'Map',
                  views: 'Map',
                  data: 'Map',
                  activity:'Map',
                  globalId: 'Array',
                  text:"Text"
                }
              }).then(function (y) {
                x = y;
              })


              function loadModel() {
                  var data = $("#loadedModel")[0].loadModel();
                  var initAttributes = function(attrs, map){
                        if(attrs.hasOwnProperty('[attributes]')){
                            var attr = attrs['[attributes]'].list;
                            for(var key in attr){
                                if(attr.hasOwnProperty(key)){
                                    if(attr[key].hasOwnProperty('key')){
                                        var ytext = map.set(attr[key].key.id, Y.Text);
                                        ytext.insert(0, attr[key].key.value);
                                    }
                                    else { 
                                        var ytext = map.set(attr[key].value.id, Y.Text);
                                        ytext.insert(0, attr[key].value.value);
                                    }
                                }
                            }

                        }else{
                            for(var key in attrs){
                                if(attrs.hasOwnProperty(key)){
                                    var value = attrs[key].value;
                                    if(!value.hasOwnProperty('option')){
                                        if(value.value instanceof String){
                                            var ytext = map.set(value.id, Y.Text);
                                            ytext.insert(0, value.value);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    x.share.data.set('model', data);
                    for(var key in data.nodes){
                        if (data.nodes.hasOwnProperty(key)) {
                            var entity = data.nodes[key];
                            var map = x.share.nodes.set(key, Y.Map);
                            var attrs = entity.attributes;
                            if(entity.hasOwnProperty('label')){
                                var ytext = map.set(entity.label.value.id, Y.Text);
                                ytext.insert(0, entity.label.value.value);
                            }
                            initAttributes(attrs, map);
                        }
                    }
                    for(var key in data.edges){
                        if (data.edges.hasOwnProperty(key)) {
                            var entity = data.edges[key];
                            var map = x.share.edges.set(key, Y.Map);
                            var attrs = entity.attributes;
                            if(entity.hasOwnProperty('label')){
                                var ytext = map.set(entity.label.value.id, Y.Text);
                                ytext.insert(0, entity.label.value.value);
                            }
                            initAttributes(attrs, map);
                        }
                    }
                    x.share.canvas.set('ReloadWidgetOperation', 'import');
              }
              function saveModel() {
                  $("#loadedModel")[0].saveModel(x);
              }
              function clearModel() {
                  x.share.data.set('model', null);
                  x.share.canvas.set('ReloadWidgetOperation', 'delete');
              }

              function initModel(){
                $("#loadedModel")[0].initModel(x);
              }

              
             </script>
             
             <link rel="import" href="http://localhost:7888/methodselector/src/elements/train-selector.html">
             </head>
             <body style="background-color:rgb(250, 250, 250);">
             
             <train-selector id="loadedModel"></train-selector>
             <div id="buttons"><center>
            <paper-button raised class="green" onclick="loadModel()">Check</paper-button>
            <paper-button raised class="blue" onclick="saveModel()">Train</paper-button>
          </center>
            <br><br>
              <div id="log"></div>
            </div>
             </body>

    ]]>
  </Content>
</Module>
